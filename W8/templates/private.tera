<!doctype html>
<html lang="ru">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</title>
    <link id="themeCss" rel="stylesheet" href="/css/{{ theme | default(value="light") }}.css">
    <style>
        main{max-width:960px;margin:24px auto;padding:0 16px}
        header img{max-width:100%;height:auto;border-radius:8px}
        ul.files{list-style:none;padding:0}
        ul.files li{margin:6px 0;display:flex;align-items:center;gap:12px;padding:8px;border-radius:6px;background:rgba(0,0,0,.02)}
        ul.files li:hover{background:rgba(0,0,0,.05)}
        .file-info{flex:1}
        .file-name{font-weight:500;margin-bottom:4px}
        .file-date{font-size:12px;opacity:.7}
        .delete-btn{background:#dc2626;color:#fff;border:0;padding:6px 12px;border-radius:4px;cursor:pointer;font-size:12px}
        .delete-btn:hover{background:#b91c1c}
        .delete-btn:disabled{background:#9ca3af;cursor:not-allowed}
        .topbar{display:flex;gap:12px;flex-wrap:wrap;align-items:center;justify-content:space-between}
        .userbox{font-size:14px;opacity:.85}
        .themebox{display:flex;align-items:center;gap:8px;font-size:14px}
        .themebox select{padding:6px 8px;border-radius:6px}
        #themeMsg{font-size:12px;opacity:.8}
        button.logout{background:#dc2626;color:#fff;border:0;padding:8px 14px;border-radius:8px;cursor:pointer;font:500 14px system-ui,Arial}
        button.logout:hover{background:#b91c1c}
        #uploadMessage{display:none;margin-top:12px;padding:12px;border-radius:8px;font-size:14px}
        .card{background:rgba(255,255,255,.7);padding:20px;border-radius:12px;margin-top:16px;box-shadow:0 2px 4px rgba(0,0,0,.1)}
        .btn{background:#2563eb;color:#fff;border:0;padding:8px 16px;border-radius:6px;cursor:pointer;font-size:14px;margin-left:8px}
        .btn:hover{background:#1d4ed8}
        .btn:disabled{background:#9ca3af;cursor:not-allowed}
        .chart-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(400px,1fr));gap:20px;margin-top:16px}
        .chart-item{background:#fff;padding:12px;border-radius:8px;box-shadow:0 1px 3px rgba(0,0,0,.1)}
        .chart-item img{width:100%;height:auto;border-radius:4px}
        .chart-item h3{margin:0 0 12px 0;font-size:16px;color:#333}
    </style>
</head>
<body>
<header>
    <main>
        <div class="topbar">
            <div class="userbox">üë§ {{ login }} (ID: {{ uid }})</div>
            <div class="themebox">
                <label for="themeSelect">–¢–µ–º–∞:</label>
                <select id="themeSelect">
                    <option value="light"{% if theme == "light" %} selected{% endif %}>Light</option>
                    <option value="dark"{% if theme == "dark" %} selected{% endif %}>Dark</option>
                    <option value="colorblind"{% if theme == "colorblind" %} selected{% endif %}>Colorblind</option>
                </select>
                <span id="themeMsg"></span>
            </div>
            <button class="logout" id="btnLogout" type="button">–í—ã–π—Ç–∏</button>
        </div>
        <h1>–ü—Ä–∏–≤–µ—Ç, {{ login }}!</h1>
        <img id="bannerImg" src="{% if theme == 'dark' %}/static/dark.svg{% elif theme == 'colorblind' %}/static/cb.svg{% else %}/static/light.svg{% endif %}" alt="banner">
    </main>
</header>

<main>
    <section class="card">
        <h2>–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF</h2>
        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" name="pdf" id="pdfFile" accept="application/pdf" required>
            <button type="submit" class="btn" id="uploadBtn">OK</button>
        </form>
        <div id="uploadMessage"></div>
    </section>

    <section class="card">
        <h2>–í–∞—à–∏ —Ñ–∞–π–ª—ã</h2>
        {% if files | length == 0 %}
            <p class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.</p>
        {% else %}
            <ul class="files">
                {% for f in files %}
                <li>
                    <div class="file-info">
                        <div class="file-name">
                            <a href="/api/pdf/{{ f.id }}" target="_blank">{{ f.original_name }}</a>
                        </div>
                        <div class="file-date">
                            –ó–∞–≥—Ä—É–∂–µ–Ω: {{ f.uploaded_at }}
                        </div>
                    </div>
                    <button class="delete-btn" data-id="{{ f.id }}">–£–¥–∞–ª–∏—Ç—å</button>
                </li>
                {% endfor %}
            </ul>
        {% endif %}
    </section>

    <section class="card">
        <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div class="chart-grid">
            <div class="chart-item">
                <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º</h3>
                <img src="/static/charts/chart_salary_by_department.png" alt="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç" loading="lazy">
            </div>
            <div class="chart-item">
                <h3>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å vs –í–æ–∑—Ä–∞—Å—Ç</h3>
                <img src="/static/charts/chart_performance_vs_age.png" alt="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤–æ–∑—Ä–∞—Å—Ç" loading="lazy">
            </div>
            <div class="chart-item">
                <h3>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
                <img src="/static/charts/chart_projects_by_department.png" alt="–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º" loading="lazy">
            </div>
            <div class="chart-item">
                <h3>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º</h3>
                <img src="/static/charts/chart_registrations_timeline.png" alt="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞" loading="lazy">
            </div>
        </div>
    </section>
</main>

<script>
document.getElementById('btnLogout').addEventListener('click', async () => {
    try {
        await fetch('/api/logout', { method: 'POST', credentials: 'same-origin' });
        ['uid', 'theme', 'lang'].forEach(n => document.cookie = n + '=; Max-Age=0; path=/');
    } catch (e) {
        console.error('Logout error:', e);
    }
    location.href = '/';
});

const themeMapCss = {
    light: '/css/light.css',
    dark:  '/css/dark.css',
    colorblind: '/css/colorblind.css'
};
const themeMapBanner = {
    light: '/static/light.svg',
    dark:  '/static/dark.svg',
    colorblind: '/static/cb.svg'
};
const themeSelect = document.getElementById('themeSelect');
const themeMsg    = document.getElementById('themeMsg');
const bannerImg   = document.getElementById('bannerImg');

function setThemeLocally(theme) {
    const link = document.getElementById('themeCss') || document.querySelector('link[rel="stylesheet"]');
    if (link && themeMapCss[theme]) link.href = themeMapCss[theme];
    if (bannerImg && themeMapBanner[theme]) bannerImg.src = themeMapBanner[theme];
}

themeSelect.addEventListener('change', async (e) => {
    const value = e.target.value;
    themeSelect.disabled = true;
    themeMsg.textContent = '‚Ä¶';
    const fd = new FormData();
    fd.append('theme', value);
    try {
        const resp = await fetch('/api/theme', { method: 'POST', body: fd, credentials: 'same-origin' });
        const data = await resp.json().catch(() => ({}));
        if (resp.ok && data.ok) {
            setThemeLocally(value);
            themeMsg.textContent = '–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞';
            themeMsg.style.color = '#166534';
            setTimeout(() => themeMsg.textContent = '', 2000);
        } else {
            themeMsg.textContent = data.error || '–û—à–∏–±–∫–∞';
            themeMsg.style.color = '#dc2626';
        }
    } catch (err) {
        themeMsg.textContent = 'Network error';
        themeMsg.style.color = '#dc2626';
    } finally {
        themeSelect.disabled = false;
    }
});

const uploadForm = document.getElementById('uploadForm');
const uploadBtn  = document.getElementById('uploadBtn');
const pdfFile    = document.getElementById('pdfFile');

function showUploadMessage(text, isSuccess = false) {
    const m = document.getElementById('uploadMessage');
    m.textContent = text;
    m.style.display = 'block';
    m.style.backgroundColor = isSuccess ? '#dcfce7' : '#fef2f2';
    m.style.color           = isSuccess ? '#166534' : '#dc2626';
    m.style.border          = `1px solid ${isSuccess ? '#bbf7d0' : '#fecaca'}`;
}

uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const file = pdfFile.files[0];
    if (!file) {
        showUploadMessage('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
    }
    uploadBtn.disabled = true;
    uploadBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶';
    document.getElementById('uploadMessage').style.display = 'none';

    const formData = new FormData(uploadForm);
    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData,
            credentials: 'same-origin'
        });
        const result = await response.json().catch(() => ({}));
        if (response.ok && result.ok) {
            showUploadMessage('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', true);
            pdfFile.value = '';
            setTimeout(() => location.reload(), 1500);
        } else {
            const errorMsg = result.error || result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞';
            showUploadMessage(errorMsg);
        }
    } catch (error) {
        showUploadMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
        uploadBtn.disabled = false;
        uploadBtn.textContent = 'OK';
    }
});

document.querySelectorAll('.delete-btn').forEach(btn => {
    btn.addEventListener('click', async (e) => {
        const id = e.target.dataset.id;
        if (!id) return;
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?')) return;

        const origText = e.target.textContent;
        e.target.disabled = true;
        e.target.textContent = '‚Ä¶';

        try {
            const response = await fetch('/api/delete-pdf/' + id, {
                method: 'DELETE',
                credentials: 'same-origin'
            });
            const result = await response.json().catch(() => ({}));
            if (response.ok && result.ok) {
                location.reload();
            } else {
                const errorMsg = result.error || result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞';
                alert(errorMsg);
                e.target.disabled = false;
                e.target.textContent = origText;
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
            e.target.disabled = false;
            e.target.textContent = origText;
        }
    });
});
</script>
</body>
</html>
